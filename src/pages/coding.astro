---
import navBar from "../components/navBar.astro"
---


<html lang="en">
<head>
    <link rel="stylesheet" href="src/stylesheet/style.css">
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/Engineering-Website/JackLogo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Electronics Portfolio | Jack O'Neal</title>

    <style>
        /* Additional styles specific to the Electronics page */
        .section {
            background-color: #fff;
            padding: 20px;
            margin-bottom: 40px;
            border-radius: 5px;
        }
        .image, .video {
            text-align: center;
            margin: 0px 0;
        }
        .image img, .video video {
            max-width: 200%;
            height: auto;
        }
    </style>
</head>
<body>
    <!-- Navigation Menu -->
    
    <!-- Optional Canvas if needed -->
    <!-- <canvas id="bg"></canvas> -->
    
    <main>
        <navBar /> 
        <header>
            <h1>Coding in C++</h1>
        </header>

        <!-- Exercise from 1-20 -->
        <section class="section">
            <h2>Exercise 05: Intro to Variables</h2>
            <h3>Code Explanation</h3>
            <p>This exercise introduces the use of variables in Arduino programming. The variable <code>x</code> is used to control the delay between turning the LED on and off.</p>
            <div class="image">
                <p><strong>Screenshot of the code:</strong></p>
                <!-- Placeholder for the screenshot image -->
                <img src="src/assets/activity5.png" alt="Exercise 05 Code Screenshot">
            </div>
            <h3>How the Code Works</h3>
            <p>The <code>setup()</code> function initializes pin 2 as an output using <code>pinMode(2, OUTPUT);</code>.</p>
            <p>In the <code>loop()</code> function, an integer variable <code>x</code> is declared and assigned a value of 500 milliseconds. This variable controls the duration for which the LED stays on and off.</p>
            <p>The code turns the LED on by setting pin 2 to HIGH, waits for <code>x</code> milliseconds, turns it off by setting pin 2 to LOW, and waits for another <code>x</code> milliseconds. This creates a blinking effect.</p>
            <h3>Control of LEDs</h3>
            <p>The Arduino sends a HIGH or LOW signal to pin 2, which controls the LED's state. By using the variable <code>x</code> in the <code>delay()</code> functions, we can easily adjust the blink rate of the LED by changing the value of <code>x</code>.</p>
        </section>

        <!-- Exercise from 21-40 -->
        <section class="section">
            <h2>Exercise 22: Counting Forward and Backward</h2>
            <h3>Code Explanation</h3>
            <p>This exercise demonstrates the use of nested <code>for</code> loops to control multiple LEDs in a sequence that counts forward and then backward.</p>
            <div class="image">
                <p><strong>Screenshot of the code:</strong></p>
                <img src="src/assets/Activity22.png" alt="Exercise 22 Code Screenshot">
            </div>
            
            <h3>How the Code Works</h3>
            <p>In the <code>setup()</code> function, a loop initializes pins 2 through 15 as outputs. This prepares all these pins to control LEDs.</p>
            <p>The <code>loop()</code> function contains two nested <code>for</code> loops inside another <code>for</code> loop that repeats the sequence 10 times.</p>
            <ul>
                <li>The first inner loop counts forward from pin 2 to pin 8, turning each LED on and off with a 100ms delay.</li>
                <li>The second inner loop counts backward from pin 15 to pin 9, performing the same action.</li>
            </ul>
            <h3>Use of Variables and Loops</h3>
            <p>The variable <code>ledNumber</code> controls which LED is active. The loops efficiently iterate through the pins without manually coding each LED's behavior.</p>
            <p>Variables:</p>
            <ul>
                <li><code>ledNumber</code>: Keeps track of the current LED pin.</li>
                <li><code>count</code>: Controls the number of times the entire sequence repeats.</li>
            </ul>
            <p>Loops:</p>
            <ul>
                <li>Outer <code>for</code> loop: Repeats the entire LED sequence 10 times.</li>
                <li>First inner <code>for</code> loop: Counts forward from pin 2 to 8.</li>
                <li>Second inner <code>for</code> loop: Counts backward from pin 15 to 9.</li>
            </ul>
            <h3>Control of LEDs</h3>
            <p>The Arduino directs the LEDs by sending HIGH and LOW signals to the specified pins in the loops. This creates a visual effect of LEDs lighting up sequentially forward and then backward.</p>
        </section>

        <!-- Exercise from 41-50 -->
        <section class="section">
            <h2>Exercise 44: Using Arrays in Custom Functions</h2>
            <h3>Code Explanation</h3>
            <p>This exercise introduces arrays and their use in controlling LEDs. An array stores a sequence of LED pin numbers, allowing for complex patterns with simpler code.</p>
            <div class="image">
                <p><strong>Screenshot of the code:</strong></p>
                <img src="src/assets/activity44.png" alt="Exercise 44 Code Screenshot">
            </div>
            <h3>How the Code Works</h3>
            <p>The <code>setup()</code> function initializes pins 2 through 15 as outputs. An array <code>myFirstArray</code> holds the sequence of LED pins to be controlled.</p>
            <p>In the <code>loop()</code> function, a nested loop structure is used:</p>
            <ul>
                <li>The outer loop (<code>for (int c = 1; c &lt;= 3; c++)</code>) repeats the LED sequence three times.</li>
                <li>The inner loop iterates through the <code>myFirstArray</code> array, accessing each LED pin.</li>
            </ul>
            <p>By using the array, the code efficiently controls LEDs in a complex pattern without manually writing each LED operation.</p>
            <h3>Use of Variables, Loops, Functions, and Arrays</h3>
            <p>Variables:</p>
            <ul>
                <li><code>ledNumber</code>: Used in <code>setup()</code> to initialize pins.</li>
                <li><code>myFirstArray</code>: An array holding the LED pin sequence.</li>
                <li><code>c</code> and <code>index</code>: Loop control variables.</li>
            </ul>
            <p>Loops:</p>
            <ul>
                <li><code>for</code> loops are used to initialize pins and to iterate over the LED sequence.</li>
            </ul>
            <p>Arrays:</p>
            <ul>
                <li><code>myFirstArray</code> stores the sequence of LED pins.</li>
                <li>The array allows accessing LED pins using an index in the loop.</li>
            </ul>
            <h3>Control of LEDs</h3>
            <p>The Arduino uses the array to send HIGH and LOW signals to the LEDs in the specified order, creating a complex light pattern.</p>
        </section>

        <!-- Video Section -->
        <section class="section">
            <h2>Demonstration Video</h2>
            <div class="video">
                <p><strong>Watch the simulation in action:</strong></p>
                <!-- Placeholder for the video -->
                <video controls>
                    <source src="led_demo.mp4" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
            </div>
            <p>This video demonstrates how the Arduino code controls the LEDs to create various light patterns as explained in the exercises above.</p>
        </section>
    </main>

</body>
</html>
